generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // relationMode      = "prisma"
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// 주석 처리 된 키 삽입하는 것 보류 
model User {
  id          Int           @id @default(autoincrement())
  phone       String?       @unique
  email       String?       @unique
  password    String?
  github_id   String?       @unique
  name        String        @unique
  avatar      String?
  placeName   String?
  roadAddress String?
  lat         String?
  lng         String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  introduce   String?
  tokens      Token[]
  products    Product[]
  posts       Post[]
  // streams   Stream[]
  SMSToken    SMSToken[]
  // Comment   Comment[]
  // Like      Like[]
  comments    Comment[]
  likes       Like[]
  chat_rooms  ChatRoom[]
  messages    Message[]
  productLike productLike[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int

  @@index([userId])
}

model Product {
  id           Int           @id @default(autoincrement())
  title        String
  price        Float
  image        String
  description  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  ChatRoom     ChatRoom[]
  productLikes productLike[]
  isSold       Boolean       @default(false)

  @@index([userId])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  comments    Comment[]
  likes       Like[]
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  @@id(name: "id", [userId, postId])
}

model productLike {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId     Int
  productId  Int

  @@id(name: "id", [userId, productId])
}

// model Answer {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int
//   postId    Int
//   answer    String
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//
//   @@index([userId])
//   @@index([postId])
// }
//
// model Wondering {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    Int
//   postId    Int
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//
//   @@index([userId])
//   @@index([postId])
// }

// model Review {
//   id           Int      @id @default(autoincrement())
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//   review       String
//   createdById  Int
//   createdForId Int
//   score        Int      @default(1)
//   createdBy    User     @relation("writtenReviews", fields: [createdById], references: [id], onDelete: Cascade)
//   createdFor   User     @relation("receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
//
//   @@index([createdById])
//   @@index([createdForId])
// }

// model Record {
//   id        Int      @id @default(autoincrement())
//   userId    Int
//   productId Int
//   createdAt DateTime @default(now())
//   kind      Kind
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
//
//   @@index([userId])
//   @@index([productId])
// }

model ChatRoom {
  id       String    @id @default(cuid())
  users    User[]
  messages Message[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
  isRead     Boolean  @default(false)

  @@index([userId])
}
